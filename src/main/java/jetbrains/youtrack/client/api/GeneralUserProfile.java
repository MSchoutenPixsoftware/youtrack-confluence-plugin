/*
 * YouTrack REST API
 * YouTrack issue tracking and project management system
 *
 * OpenAPI spec version: 2099.99
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package jetbrains.youtrack.client.api;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Represents the user profile in YouTrack.
 */
@Schema(description = "Represents the user profile in YouTrack.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-04T14:25:38.465627+03:00[Europe/Moscow]")@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "$type", visible = true )
@JsonSubTypes({
})

public class GeneralUserProfile {
  @JsonProperty("dateFieldFormat")
  private DateFormatDescriptor dateFieldFormat = null;

  @JsonProperty("timezone")
  private TimeZoneDescriptor timezone = null;

  @JsonProperty("locale")
  private LocaleDescriptor locale = null;

  @JsonProperty("id")
  private String id = null;

  @JsonTypeId
  private String $type = null;

  public GeneralUserProfile dateFieldFormat(DateFormatDescriptor dateFieldFormat) {
    this.dateFieldFormat = dateFieldFormat;
    return this;
  }

   /**
   * Get dateFieldFormat
   * @return dateFieldFormat
  **/
  @Schema(description = "")
  public DateFormatDescriptor getDateFieldFormat() {
    return dateFieldFormat;
  }

  public void setDateFieldFormat(DateFormatDescriptor dateFieldFormat) {
    this.dateFieldFormat = dateFieldFormat;
  }

  public GeneralUserProfile timezone(TimeZoneDescriptor timezone) {
    this.timezone = timezone;
    return this;
  }

   /**
   * Get timezone
   * @return timezone
  **/
  @Schema(description = "")
  public TimeZoneDescriptor getTimezone() {
    return timezone;
  }

  public void setTimezone(TimeZoneDescriptor timezone) {
    this.timezone = timezone;
  }

  public GeneralUserProfile locale(LocaleDescriptor locale) {
    this.locale = locale;
    return this;
  }

   /**
   * Get locale
   * @return locale
  **/
  @Schema(description = "")
  public LocaleDescriptor getLocale() {
    return locale;
  }

  public void setLocale(LocaleDescriptor locale) {
    this.locale = locale;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public String getId() {
    return id;
  }

   /**
   * Get $type
   * @return $type
  **/
  @Schema(description = "")
  public String get$Type() {
    return $type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeneralUserProfile generalUserProfile = (GeneralUserProfile) o;
    return Objects.equals(this.dateFieldFormat, generalUserProfile.dateFieldFormat) &&
        Objects.equals(this.timezone, generalUserProfile.timezone) &&
        Objects.equals(this.locale, generalUserProfile.locale) &&
        Objects.equals(this.id, generalUserProfile.id) &&
        Objects.equals(this.$type, generalUserProfile.$type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateFieldFormat, timezone, locale, id, $type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeneralUserProfile {\n");
    
    sb.append("    dateFieldFormat: ").append(toIndentedString(dateFieldFormat)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    $type: ").append(toIndentedString($type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
