/*
 * YouTrack REST API
 * YouTrack issue tracking and project management system
 *
 * OpenAPI spec version: 2099.99
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package jetbrains.youtrack.client.api;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;

/**
 * Represents issue links of a particular link type (for example, &#x27;relates to&#x27;).
 */
@Schema(description = "Represents issue links of a particular link type (for example, 'relates to').")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-04T14:25:38.465627+03:00[Europe/Moscow]")@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "$type", visible = true )
@JsonSubTypes({
})

public class IssueLink {
  /**
   * Gets or Sets direction
   */
  public enum DirectionEnum {
    OUTWARD("OUTWARD"),
    INWARD("INWARD"),
    BOTH("BOTH");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static DirectionEnum fromValue(String text) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("direction")
  private DirectionEnum direction = null;

  @JsonProperty("linkType")
  private IssueLinkType linkType = null;

  @JsonProperty("issues")
  private List<Issue> issues = null;

  @JsonProperty("trimmedIssues")
  private List<Issue> trimmedIssues = null;

  @JsonProperty("id")
  private String id = null;

  @JsonTypeId
  private String $type = null;

   /**
   * Get direction
   * @return direction
  **/
  @Schema(description = "")
  public DirectionEnum getDirection() {
    return direction;
  }

  public IssueLink linkType(IssueLinkType linkType) {
    this.linkType = linkType;
    return this;
  }

   /**
   * Get linkType
   * @return linkType
  **/
  @Schema(description = "")
  public IssueLinkType getLinkType() {
    return linkType;
  }

  public void setLinkType(IssueLinkType linkType) {
    this.linkType = linkType;
  }

  public IssueLink issues(List<Issue> issues) {
    this.issues = issues;
    return this;
  }

  public IssueLink addIssuesItem(Issue issuesItem) {
    if (this.issues == null) {
      this.issues = new ArrayList<Issue>();
    }
    this.issues.add(issuesItem);
    return this;
  }

   /**
   * Get issues
   * @return issues
  **/
  @Schema(description = "")
  public List<Issue> getIssues() {
    return issues;
  }

  public void setIssues(List<Issue> issues) {
    this.issues = issues;
  }

   /**
   * Get trimmedIssues
   * @return trimmedIssues
  **/
  @Schema(description = "")
  public List<Issue> getTrimmedIssues() {
    return trimmedIssues;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public String getId() {
    return id;
  }

   /**
   * Get $type
   * @return $type
  **/
  @Schema(description = "")
  public String get$Type() {
    return $type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssueLink issueLink = (IssueLink) o;
    return Objects.equals(this.direction, issueLink.direction) &&
        Objects.equals(this.linkType, issueLink.linkType) &&
        Objects.equals(this.issues, issueLink.issues) &&
        Objects.equals(this.trimmedIssues, issueLink.trimmedIssues) &&
        Objects.equals(this.id, issueLink.id) &&
        Objects.equals(this.$type, issueLink.$type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(direction, linkType, issues, trimmedIssues, id, $type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssueLink {\n");
    
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    linkType: ").append(toIndentedString(linkType)).append("\n");
    sb.append("    issues: ").append(toIndentedString(issues)).append("\n");
    sb.append("    trimmedIssues: ").append(toIndentedString(trimmedIssues)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    $type: ").append(toIndentedString($type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
