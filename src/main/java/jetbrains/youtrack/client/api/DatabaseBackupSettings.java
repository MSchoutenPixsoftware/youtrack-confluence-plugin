/*
 * YouTrack REST API
 * YouTrack issue tracking and project management system
 *
 * OpenAPI spec version: 2099.99
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package jetbrains.youtrack.client.api;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;

/**
 * Represents database backup settings of the YouTrack instance.
 */
@Schema(description = "Represents database backup settings of the YouTrack instance.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-04T14:25:38.465627+03:00[Europe/Moscow]")@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "$type", visible = true )
@JsonSubTypes({
})

public class DatabaseBackupSettings {
  @JsonProperty("location")
  private String location = null;

  @JsonProperty("filesToKeep")
  private Integer filesToKeep = null;

  @JsonProperty("cronExpression")
  private String cronExpression = null;

  /**
   * Gets or Sets archiveFormat
   */
  public enum ArchiveFormatEnum {
    TAR_GZ("TAR_GZ"),
    ZIP("ZIP");

    private String value;

    ArchiveFormatEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static ArchiveFormatEnum fromValue(String text) {
      for (ArchiveFormatEnum b : ArchiveFormatEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("archiveFormat")
  private ArchiveFormatEnum archiveFormat = null;

  @JsonProperty("isOn")
  private Boolean isOn = null;

  @JsonProperty("availableDiskSpace")
  private Long availableDiskSpace = null;

  @JsonProperty("notifiedUsers")
  private List<User> notifiedUsers = null;

  @JsonProperty("backupStatus")
  private BackupStatus backupStatus = null;

  @JsonProperty("id")
  private String id = null;

  @JsonTypeId
  private String $type = null;

  public DatabaseBackupSettings location(String location) {
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @Schema(description = "")
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }

  public DatabaseBackupSettings filesToKeep(Integer filesToKeep) {
    this.filesToKeep = filesToKeep;
    return this;
  }

   /**
   * Get filesToKeep
   * @return filesToKeep
  **/
  @Schema(description = "")
  public Integer getFilesToKeep() {
    return filesToKeep;
  }

  public void setFilesToKeep(Integer filesToKeep) {
    this.filesToKeep = filesToKeep;
  }

  public DatabaseBackupSettings cronExpression(String cronExpression) {
    this.cronExpression = cronExpression;
    return this;
  }

   /**
   * Get cronExpression
   * @return cronExpression
  **/
  @Schema(description = "")
  public String getCronExpression() {
    return cronExpression;
  }

  public void setCronExpression(String cronExpression) {
    this.cronExpression = cronExpression;
  }

  public DatabaseBackupSettings archiveFormat(ArchiveFormatEnum archiveFormat) {
    this.archiveFormat = archiveFormat;
    return this;
  }

   /**
   * Get archiveFormat
   * @return archiveFormat
  **/
  @Schema(description = "")
  public ArchiveFormatEnum getArchiveFormat() {
    return archiveFormat;
  }

  public void setArchiveFormat(ArchiveFormatEnum archiveFormat) {
    this.archiveFormat = archiveFormat;
  }

  public DatabaseBackupSettings isOn(Boolean isOn) {
    this.isOn = isOn;
    return this;
  }

   /**
   * Get isOn
   * @return isOn
  **/
  @Schema(description = "")
  public Boolean isIsOn() {
    return isOn;
  }

  public void setIsOn(Boolean isOn) {
    this.isOn = isOn;
  }

   /**
   * Get availableDiskSpace
   * @return availableDiskSpace
  **/
  @Schema(description = "")
  public Long getAvailableDiskSpace() {
    return availableDiskSpace;
  }

  public DatabaseBackupSettings notifiedUsers(List<User> notifiedUsers) {
    this.notifiedUsers = notifiedUsers;
    return this;
  }

  public DatabaseBackupSettings addNotifiedUsersItem(User notifiedUsersItem) {
    if (this.notifiedUsers == null) {
      this.notifiedUsers = new ArrayList<User>();
    }
    this.notifiedUsers.add(notifiedUsersItem);
    return this;
  }

   /**
   * Get notifiedUsers
   * @return notifiedUsers
  **/
  @Schema(description = "")
  public List<User> getNotifiedUsers() {
    return notifiedUsers;
  }

  public void setNotifiedUsers(List<User> notifiedUsers) {
    this.notifiedUsers = notifiedUsers;
  }

  public DatabaseBackupSettings backupStatus(BackupStatus backupStatus) {
    this.backupStatus = backupStatus;
    return this;
  }

   /**
   * Get backupStatus
   * @return backupStatus
  **/
  @Schema(description = "")
  public BackupStatus getBackupStatus() {
    return backupStatus;
  }

  public void setBackupStatus(BackupStatus backupStatus) {
    this.backupStatus = backupStatus;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public String getId() {
    return id;
  }

   /**
   * Get $type
   * @return $type
  **/
  @Schema(description = "")
  public String get$Type() {
    return $type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseBackupSettings databaseBackupSettings = (DatabaseBackupSettings) o;
    return Objects.equals(this.location, databaseBackupSettings.location) &&
        Objects.equals(this.filesToKeep, databaseBackupSettings.filesToKeep) &&
        Objects.equals(this.cronExpression, databaseBackupSettings.cronExpression) &&
        Objects.equals(this.archiveFormat, databaseBackupSettings.archiveFormat) &&
        Objects.equals(this.isOn, databaseBackupSettings.isOn) &&
        Objects.equals(this.availableDiskSpace, databaseBackupSettings.availableDiskSpace) &&
        Objects.equals(this.notifiedUsers, databaseBackupSettings.notifiedUsers) &&
        Objects.equals(this.backupStatus, databaseBackupSettings.backupStatus) &&
        Objects.equals(this.id, databaseBackupSettings.id) &&
        Objects.equals(this.$type, databaseBackupSettings.$type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(location, filesToKeep, cronExpression, archiveFormat, isOn, availableDiskSpace, notifiedUsers, backupStatus, id, $type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseBackupSettings {\n");
    
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    filesToKeep: ").append(toIndentedString(filesToKeep)).append("\n");
    sb.append("    cronExpression: ").append(toIndentedString(cronExpression)).append("\n");
    sb.append("    archiveFormat: ").append(toIndentedString(archiveFormat)).append("\n");
    sb.append("    isOn: ").append(toIndentedString(isOn)).append("\n");
    sb.append("    availableDiskSpace: ").append(toIndentedString(availableDiskSpace)).append("\n");
    sb.append("    notifiedUsers: ").append(toIndentedString(notifiedUsers)).append("\n");
    sb.append("    backupStatus: ").append(toIndentedString(backupStatus)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    $type: ").append(toIndentedString($type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
