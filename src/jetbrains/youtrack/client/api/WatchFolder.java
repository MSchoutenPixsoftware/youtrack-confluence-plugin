/*
 * YouTrack REST API
 * YouTrack issue tracking and project management system
 *
 * OpenAPI spec version: 2099.99
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package jetbrains.youtrack.client.api;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * A &#x60;WatchFolder&#x60; is an &#x60;IssueFolder&#x60; that let you enable notifications for a set  of issues that it enfolds. It is a common abstract ancestor for saved searches and issue tags.
 */
@Schema(description = "A `WatchFolder` is an `IssueFolder` that let you enable notifications for a set  of issues that it enfolds. It is a common abstract ancestor for saved searches and issue tags.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-04T14:25:38.465627+03:00[Europe/Moscow]")
public class WatchFolder extends IssueFolder {
  @JsonProperty("owner")
  private User owner = null;

  @JsonProperty("visibleFor")
  private UserGroup visibleFor = null;

  @JsonProperty("updateableBy")
  private UserGroup updateableBy = null;

  public WatchFolder owner(User owner) {
    this.owner = owner;
    return this;
  }

   /**
   * Get owner
   * @return owner
  **/
  @Schema(description = "")
  public User getOwner() {
    return owner;
  }

  public void setOwner(User owner) {
    this.owner = owner;
  }

  public WatchFolder visibleFor(UserGroup visibleFor) {
    this.visibleFor = visibleFor;
    return this;
  }

   /**
   * Get visibleFor
   * @return visibleFor
  **/
  @Schema(description = "")
  public UserGroup getVisibleFor() {
    return visibleFor;
  }

  public void setVisibleFor(UserGroup visibleFor) {
    this.visibleFor = visibleFor;
  }

  public WatchFolder updateableBy(UserGroup updateableBy) {
    this.updateableBy = updateableBy;
    return this;
  }

   /**
   * Get updateableBy
   * @return updateableBy
  **/
  @Schema(description = "")
  public UserGroup getUpdateableBy() {
    return updateableBy;
  }

  public void setUpdateableBy(UserGroup updateableBy) {
    this.updateableBy = updateableBy;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WatchFolder watchFolder = (WatchFolder) o;
    return Objects.equals(this.owner, watchFolder.owner) &&
        Objects.equals(this.visibleFor, watchFolder.visibleFor) &&
        Objects.equals(this.updateableBy, watchFolder.updateableBy) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(owner, visibleFor, updateableBy, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WatchFolder {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    visibleFor: ").append(toIndentedString(visibleFor)).append("\n");
    sb.append("    updateableBy: ").append(toIndentedString(updateableBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
