/*
 * YouTrack REST API
 * YouTrack issue tracking and project management system
 *
 * OpenAPI spec version: 2099.99
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package jetbrains.youtrack.client.api;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;

/**
 * Represents an existing issue comment.
 */
@Schema(description = "Represents an existing issue comment.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-04T14:25:38.465627+03:00[Europe/Moscow]")@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "$type", visible = true )
@JsonSubTypes({
})

public class IssueComment {
  @JsonProperty("text")
  private String text = null;

  @JsonProperty("usesMarkdown")
  private Boolean usesMarkdown = null;

  @JsonProperty("textPreview")
  private String textPreview = null;

  @JsonProperty("created")
  private Long created = null;

  @JsonProperty("updated")
  private Long updated = null;

  @JsonProperty("author")
  private User author = null;

  @JsonProperty("issue")
  private Issue issue = null;

  @JsonProperty("attachments")
  private List<IssueAttachment> attachments = null;

  @JsonProperty("visibility")
  private Visibility visibility = null;

  @JsonProperty("deleted")
  private Boolean deleted = null;

  @JsonProperty("id")
  private String id = null;

  @JsonTypeId
  private String $type = null;

  public IssueComment text(String text) {
    this.text = text;
    return this;
  }

   /**
   * Get text
   * @return text
  **/
  @Schema(description = "")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public IssueComment usesMarkdown(Boolean usesMarkdown) {
    this.usesMarkdown = usesMarkdown;
    return this;
  }

   /**
   * Get usesMarkdown
   * @return usesMarkdown
  **/
  @Schema(description = "")
  public Boolean isUsesMarkdown() {
    return usesMarkdown;
  }

  public void setUsesMarkdown(Boolean usesMarkdown) {
    this.usesMarkdown = usesMarkdown;
  }

   /**
   * Get textPreview
   * @return textPreview
  **/
  @Schema(description = "")
  public String getTextPreview() {
    return textPreview;
  }

   /**
   * Get created
   * @return created
  **/
  @Schema(description = "")
  public Long getCreated() {
    return created;
  }

   /**
   * Get updated
   * @return updated
  **/
  @Schema(description = "")
  public Long getUpdated() {
    return updated;
  }

  public IssueComment author(User author) {
    this.author = author;
    return this;
  }

   /**
   * Get author
   * @return author
  **/
  @Schema(description = "")
  public User getAuthor() {
    return author;
  }

  public void setAuthor(User author) {
    this.author = author;
  }

  public IssueComment issue(Issue issue) {
    this.issue = issue;
    return this;
  }

   /**
   * Get issue
   * @return issue
  **/
  @Schema(description = "")
  public Issue getIssue() {
    return issue;
  }

  public void setIssue(Issue issue) {
    this.issue = issue;
  }

  public IssueComment attachments(List<IssueAttachment> attachments) {
    this.attachments = attachments;
    return this;
  }

  public IssueComment addAttachmentsItem(IssueAttachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<IssueAttachment>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * Get attachments
   * @return attachments
  **/
  @Schema(description = "")
  public List<IssueAttachment> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<IssueAttachment> attachments) {
    this.attachments = attachments;
  }

  public IssueComment visibility(Visibility visibility) {
    this.visibility = visibility;
    return this;
  }

   /**
   * Get visibility
   * @return visibility
  **/
  @Schema(description = "")
  public Visibility getVisibility() {
    return visibility;
  }

  public void setVisibility(Visibility visibility) {
    this.visibility = visibility;
  }

  public IssueComment deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

   /**
   * Get deleted
   * @return deleted
  **/
  @Schema(description = "")
  public Boolean isDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public String getId() {
    return id;
  }

   /**
   * Get $type
   * @return $type
  **/
  @Schema(description = "")
  public String get$Type() {
    return $type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssueComment issueComment = (IssueComment) o;
    return Objects.equals(this.text, issueComment.text) &&
        Objects.equals(this.usesMarkdown, issueComment.usesMarkdown) &&
        Objects.equals(this.textPreview, issueComment.textPreview) &&
        Objects.equals(this.created, issueComment.created) &&
        Objects.equals(this.updated, issueComment.updated) &&
        Objects.equals(this.author, issueComment.author) &&
        Objects.equals(this.issue, issueComment.issue) &&
        Objects.equals(this.attachments, issueComment.attachments) &&
        Objects.equals(this.visibility, issueComment.visibility) &&
        Objects.equals(this.deleted, issueComment.deleted) &&
        Objects.equals(this.id, issueComment.id) &&
        Objects.equals(this.$type, issueComment.$type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(text, usesMarkdown, textPreview, created, updated, author, issue, attachments, visibility, deleted, id, $type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssueComment {\n");
    
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    usesMarkdown: ").append(toIndentedString(usesMarkdown)).append("\n");
    sb.append("    textPreview: ").append(toIndentedString(textPreview)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    issue: ").append(toIndentedString(issue)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    $type: ").append(toIndentedString($type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
