/*
 * YouTrack REST API
 * YouTrack issue tracking and project management system
 *
 * OpenAPI spec version: 2099.99
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package jetbrains.youtrack.client.api;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * Telemetry data of the YouTrack installation.
 */
@Schema(description = "Telemetry data of the YouTrack installation.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-04T14:25:38.465627+03:00[Europe/Moscow]")@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "$type", visible = true )
@JsonSubTypes({
})

public class Telemetry {
  @JsonProperty("installationFolder")
  private String installationFolder = null;

  @JsonProperty("databaseLocation")
  private String databaseLocation = null;

  @JsonProperty("logsLocation")
  private String logsLocation = null;

  @JsonProperty("availableProcessors")
  private Integer availableProcessors = null;

  @JsonProperty("availableMemory")
  private String availableMemory = null;

  @JsonProperty("allocatedMemory")
  private String allocatedMemory = null;

  @JsonProperty("usedMemory")
  private String usedMemory = null;

  @JsonProperty("uptime")
  private String uptime = null;

  @JsonProperty("startedTime")
  private Long startedTime = null;

  @JsonProperty("databaseBackgroundThreads")
  private Integer databaseBackgroundThreads = null;

  @JsonProperty("pendingAsyncJobs")
  private Integer pendingAsyncJobs = null;

  @JsonProperty("cachedResultsCountInDBQueriesCache")
  private Integer cachedResultsCountInDBQueriesCache = null;

  @JsonProperty("databaseQueriesCacheHitRate")
  private String databaseQueriesCacheHitRate = null;

  @JsonProperty("blobStringsCacheHitRate")
  private String blobStringsCacheHitRate = null;

  @JsonProperty("totalTransactions")
  private Long totalTransactions = null;

  @JsonProperty("transactionsPerSecond")
  private String transactionsPerSecond = null;

  @JsonProperty("requestsPerSecond")
  private String requestsPerSecond = null;

  @JsonProperty("databaseSize")
  private String databaseSize = null;

  @JsonProperty("fullDatabaseSize")
  private String fullDatabaseSize = null;

  @JsonProperty("textIndexSize")
  private String textIndexSize = null;

  @JsonProperty("onlineUsers")
  private OnlineUsers onlineUsers = null;

  @JsonProperty("reportCalculatorThreads")
  private Integer reportCalculatorThreads = null;

  @JsonProperty("notificationAnalyzerThreads")
  private Integer notificationAnalyzerThreads = null;

  @JsonProperty("id")
  private String id = null;

  @JsonTypeId
  private String $type = null;

   /**
   * Get installationFolder
   * @return installationFolder
  **/
  @Schema(description = "")
  public String getInstallationFolder() {
    return installationFolder;
  }

   /**
   * Get databaseLocation
   * @return databaseLocation
  **/
  @Schema(description = "")
  public String getDatabaseLocation() {
    return databaseLocation;
  }

   /**
   * Get logsLocation
   * @return logsLocation
  **/
  @Schema(description = "")
  public String getLogsLocation() {
    return logsLocation;
  }

   /**
   * Get availableProcessors
   * @return availableProcessors
  **/
  @Schema(description = "")
  public Integer getAvailableProcessors() {
    return availableProcessors;
  }

   /**
   * Get availableMemory
   * @return availableMemory
  **/
  @Schema(description = "")
  public String getAvailableMemory() {
    return availableMemory;
  }

   /**
   * Get allocatedMemory
   * @return allocatedMemory
  **/
  @Schema(description = "")
  public String getAllocatedMemory() {
    return allocatedMemory;
  }

   /**
   * Get usedMemory
   * @return usedMemory
  **/
  @Schema(description = "")
  public String getUsedMemory() {
    return usedMemory;
  }

   /**
   * Get uptime
   * @return uptime
  **/
  @Schema(description = "")
  public String getUptime() {
    return uptime;
  }

   /**
   * Get startedTime
   * @return startedTime
  **/
  @Schema(description = "")
  public Long getStartedTime() {
    return startedTime;
  }

   /**
   * Get databaseBackgroundThreads
   * @return databaseBackgroundThreads
  **/
  @Schema(description = "")
  public Integer getDatabaseBackgroundThreads() {
    return databaseBackgroundThreads;
  }

   /**
   * Get pendingAsyncJobs
   * @return pendingAsyncJobs
  **/
  @Schema(description = "")
  public Integer getPendingAsyncJobs() {
    return pendingAsyncJobs;
  }

   /**
   * Get cachedResultsCountInDBQueriesCache
   * @return cachedResultsCountInDBQueriesCache
  **/
  @Schema(description = "")
  public Integer getCachedResultsCountInDBQueriesCache() {
    return cachedResultsCountInDBQueriesCache;
  }

   /**
   * Get databaseQueriesCacheHitRate
   * @return databaseQueriesCacheHitRate
  **/
  @Schema(description = "")
  public String getDatabaseQueriesCacheHitRate() {
    return databaseQueriesCacheHitRate;
  }

   /**
   * Get blobStringsCacheHitRate
   * @return blobStringsCacheHitRate
  **/
  @Schema(description = "")
  public String getBlobStringsCacheHitRate() {
    return blobStringsCacheHitRate;
  }

   /**
   * Get totalTransactions
   * @return totalTransactions
  **/
  @Schema(description = "")
  public Long getTotalTransactions() {
    return totalTransactions;
  }

   /**
   * Get transactionsPerSecond
   * @return transactionsPerSecond
  **/
  @Schema(description = "")
  public String getTransactionsPerSecond() {
    return transactionsPerSecond;
  }

   /**
   * Get requestsPerSecond
   * @return requestsPerSecond
  **/
  @Schema(description = "")
  public String getRequestsPerSecond() {
    return requestsPerSecond;
  }

   /**
   * Get databaseSize
   * @return databaseSize
  **/
  @Schema(description = "")
  public String getDatabaseSize() {
    return databaseSize;
  }

   /**
   * Get fullDatabaseSize
   * @return fullDatabaseSize
  **/
  @Schema(description = "")
  public String getFullDatabaseSize() {
    return fullDatabaseSize;
  }

   /**
   * Get textIndexSize
   * @return textIndexSize
  **/
  @Schema(description = "")
  public String getTextIndexSize() {
    return textIndexSize;
  }

  public Telemetry onlineUsers(OnlineUsers onlineUsers) {
    this.onlineUsers = onlineUsers;
    return this;
  }

   /**
   * Get onlineUsers
   * @return onlineUsers
  **/
  @Schema(description = "")
  public OnlineUsers getOnlineUsers() {
    return onlineUsers;
  }

  public void setOnlineUsers(OnlineUsers onlineUsers) {
    this.onlineUsers = onlineUsers;
  }

   /**
   * Get reportCalculatorThreads
   * @return reportCalculatorThreads
  **/
  @Schema(description = "")
  public Integer getReportCalculatorThreads() {
    return reportCalculatorThreads;
  }

   /**
   * Get notificationAnalyzerThreads
   * @return notificationAnalyzerThreads
  **/
  @Schema(description = "")
  public Integer getNotificationAnalyzerThreads() {
    return notificationAnalyzerThreads;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public String getId() {
    return id;
  }

   /**
   * Get $type
   * @return $type
  **/
  @Schema(description = "")
  public String get$Type() {
    return $type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Telemetry telemetry = (Telemetry) o;
    return Objects.equals(this.installationFolder, telemetry.installationFolder) &&
        Objects.equals(this.databaseLocation, telemetry.databaseLocation) &&
        Objects.equals(this.logsLocation, telemetry.logsLocation) &&
        Objects.equals(this.availableProcessors, telemetry.availableProcessors) &&
        Objects.equals(this.availableMemory, telemetry.availableMemory) &&
        Objects.equals(this.allocatedMemory, telemetry.allocatedMemory) &&
        Objects.equals(this.usedMemory, telemetry.usedMemory) &&
        Objects.equals(this.uptime, telemetry.uptime) &&
        Objects.equals(this.startedTime, telemetry.startedTime) &&
        Objects.equals(this.databaseBackgroundThreads, telemetry.databaseBackgroundThreads) &&
        Objects.equals(this.pendingAsyncJobs, telemetry.pendingAsyncJobs) &&
        Objects.equals(this.cachedResultsCountInDBQueriesCache, telemetry.cachedResultsCountInDBQueriesCache) &&
        Objects.equals(this.databaseQueriesCacheHitRate, telemetry.databaseQueriesCacheHitRate) &&
        Objects.equals(this.blobStringsCacheHitRate, telemetry.blobStringsCacheHitRate) &&
        Objects.equals(this.totalTransactions, telemetry.totalTransactions) &&
        Objects.equals(this.transactionsPerSecond, telemetry.transactionsPerSecond) &&
        Objects.equals(this.requestsPerSecond, telemetry.requestsPerSecond) &&
        Objects.equals(this.databaseSize, telemetry.databaseSize) &&
        Objects.equals(this.fullDatabaseSize, telemetry.fullDatabaseSize) &&
        Objects.equals(this.textIndexSize, telemetry.textIndexSize) &&
        Objects.equals(this.onlineUsers, telemetry.onlineUsers) &&
        Objects.equals(this.reportCalculatorThreads, telemetry.reportCalculatorThreads) &&
        Objects.equals(this.notificationAnalyzerThreads, telemetry.notificationAnalyzerThreads) &&
        Objects.equals(this.id, telemetry.id) &&
        Objects.equals(this.$type, telemetry.$type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(installationFolder, databaseLocation, logsLocation, availableProcessors, availableMemory, allocatedMemory, usedMemory, uptime, startedTime, databaseBackgroundThreads, pendingAsyncJobs, cachedResultsCountInDBQueriesCache, databaseQueriesCacheHitRate, blobStringsCacheHitRate, totalTransactions, transactionsPerSecond, requestsPerSecond, databaseSize, fullDatabaseSize, textIndexSize, onlineUsers, reportCalculatorThreads, notificationAnalyzerThreads, id, $type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Telemetry {\n");
    
    sb.append("    installationFolder: ").append(toIndentedString(installationFolder)).append("\n");
    sb.append("    databaseLocation: ").append(toIndentedString(databaseLocation)).append("\n");
    sb.append("    logsLocation: ").append(toIndentedString(logsLocation)).append("\n");
    sb.append("    availableProcessors: ").append(toIndentedString(availableProcessors)).append("\n");
    sb.append("    availableMemory: ").append(toIndentedString(availableMemory)).append("\n");
    sb.append("    allocatedMemory: ").append(toIndentedString(allocatedMemory)).append("\n");
    sb.append("    usedMemory: ").append(toIndentedString(usedMemory)).append("\n");
    sb.append("    uptime: ").append(toIndentedString(uptime)).append("\n");
    sb.append("    startedTime: ").append(toIndentedString(startedTime)).append("\n");
    sb.append("    databaseBackgroundThreads: ").append(toIndentedString(databaseBackgroundThreads)).append("\n");
    sb.append("    pendingAsyncJobs: ").append(toIndentedString(pendingAsyncJobs)).append("\n");
    sb.append("    cachedResultsCountInDBQueriesCache: ").append(toIndentedString(cachedResultsCountInDBQueriesCache)).append("\n");
    sb.append("    databaseQueriesCacheHitRate: ").append(toIndentedString(databaseQueriesCacheHitRate)).append("\n");
    sb.append("    blobStringsCacheHitRate: ").append(toIndentedString(blobStringsCacheHitRate)).append("\n");
    sb.append("    totalTransactions: ").append(toIndentedString(totalTransactions)).append("\n");
    sb.append("    transactionsPerSecond: ").append(toIndentedString(transactionsPerSecond)).append("\n");
    sb.append("    requestsPerSecond: ").append(toIndentedString(requestsPerSecond)).append("\n");
    sb.append("    databaseSize: ").append(toIndentedString(databaseSize)).append("\n");
    sb.append("    fullDatabaseSize: ").append(toIndentedString(fullDatabaseSize)).append("\n");
    sb.append("    textIndexSize: ").append(toIndentedString(textIndexSize)).append("\n");
    sb.append("    onlineUsers: ").append(toIndentedString(onlineUsers)).append("\n");
    sb.append("    reportCalculatorThreads: ").append(toIndentedString(reportCalculatorThreads)).append("\n");
    sb.append("    notificationAnalyzerThreads: ").append(toIndentedString(notificationAnalyzerThreads)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    $type: ").append(toIndentedString($type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
