/*
 * YouTrack REST API
 * YouTrack issue tracking and project management system
 *
 * OpenAPI spec version: 2099.99
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package jetbrains.youtrack.client.api;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Represents the settings of a link type in YouTrack.
 */
@Schema(description = "Represents the settings of a link type in YouTrack.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-04T14:25:38.465627+03:00[Europe/Moscow]")@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "$type", visible = true )
@JsonSubTypes({
})

public class IssueLinkType {
  @JsonProperty("name")
  private String name = null;

  @JsonProperty("localizedName")
  private String localizedName = null;

  @JsonProperty("sourceToTarget")
  private String sourceToTarget = null;

  @JsonProperty("localizedSourceToTarget")
  private String localizedSourceToTarget = null;

  @JsonProperty("targetToSource")
  private String targetToSource = null;

  @JsonProperty("localizedTargetToSource")
  private String localizedTargetToSource = null;

  @JsonProperty("directed")
  private Boolean directed = null;

  @JsonProperty("aggregation")
  private Boolean aggregation = null;

  @JsonProperty("readOnly")
  private Boolean readOnly = null;

  @JsonProperty("id")
  private String id = null;

  @JsonTypeId
  private String $type = null;

  public IssueLinkType name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public IssueLinkType localizedName(String localizedName) {
    this.localizedName = localizedName;
    return this;
  }

   /**
   * Get localizedName
   * @return localizedName
  **/
  @Schema(description = "")
  public String getLocalizedName() {
    return localizedName;
  }

  public void setLocalizedName(String localizedName) {
    this.localizedName = localizedName;
  }

  public IssueLinkType sourceToTarget(String sourceToTarget) {
    this.sourceToTarget = sourceToTarget;
    return this;
  }

   /**
   * Get sourceToTarget
   * @return sourceToTarget
  **/
  @Schema(description = "")
  public String getSourceToTarget() {
    return sourceToTarget;
  }

  public void setSourceToTarget(String sourceToTarget) {
    this.sourceToTarget = sourceToTarget;
  }

  public IssueLinkType localizedSourceToTarget(String localizedSourceToTarget) {
    this.localizedSourceToTarget = localizedSourceToTarget;
    return this;
  }

   /**
   * Get localizedSourceToTarget
   * @return localizedSourceToTarget
  **/
  @Schema(description = "")
  public String getLocalizedSourceToTarget() {
    return localizedSourceToTarget;
  }

  public void setLocalizedSourceToTarget(String localizedSourceToTarget) {
    this.localizedSourceToTarget = localizedSourceToTarget;
  }

  public IssueLinkType targetToSource(String targetToSource) {
    this.targetToSource = targetToSource;
    return this;
  }

   /**
   * Get targetToSource
   * @return targetToSource
  **/
  @Schema(description = "")
  public String getTargetToSource() {
    return targetToSource;
  }

  public void setTargetToSource(String targetToSource) {
    this.targetToSource = targetToSource;
  }

  public IssueLinkType localizedTargetToSource(String localizedTargetToSource) {
    this.localizedTargetToSource = localizedTargetToSource;
    return this;
  }

   /**
   * Get localizedTargetToSource
   * @return localizedTargetToSource
  **/
  @Schema(description = "")
  public String getLocalizedTargetToSource() {
    return localizedTargetToSource;
  }

  public void setLocalizedTargetToSource(String localizedTargetToSource) {
    this.localizedTargetToSource = localizedTargetToSource;
  }

  public IssueLinkType directed(Boolean directed) {
    this.directed = directed;
    return this;
  }

   /**
   * Get directed
   * @return directed
  **/
  @Schema(description = "")
  public Boolean isDirected() {
    return directed;
  }

  public void setDirected(Boolean directed) {
    this.directed = directed;
  }

  public IssueLinkType aggregation(Boolean aggregation) {
    this.aggregation = aggregation;
    return this;
  }

   /**
   * Get aggregation
   * @return aggregation
  **/
  @Schema(description = "")
  public Boolean isAggregation() {
    return aggregation;
  }

  public void setAggregation(Boolean aggregation) {
    this.aggregation = aggregation;
  }

   /**
   * Get readOnly
   * @return readOnly
  **/
  @Schema(description = "")
  public Boolean isReadOnly() {
    return readOnly;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public String getId() {
    return id;
  }

   /**
   * Get $type
   * @return $type
  **/
  @Schema(description = "")
  public String get$Type() {
    return $type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssueLinkType issueLinkType = (IssueLinkType) o;
    return Objects.equals(this.name, issueLinkType.name) &&
        Objects.equals(this.localizedName, issueLinkType.localizedName) &&
        Objects.equals(this.sourceToTarget, issueLinkType.sourceToTarget) &&
        Objects.equals(this.localizedSourceToTarget, issueLinkType.localizedSourceToTarget) &&
        Objects.equals(this.targetToSource, issueLinkType.targetToSource) &&
        Objects.equals(this.localizedTargetToSource, issueLinkType.localizedTargetToSource) &&
        Objects.equals(this.directed, issueLinkType.directed) &&
        Objects.equals(this.aggregation, issueLinkType.aggregation) &&
        Objects.equals(this.readOnly, issueLinkType.readOnly) &&
        Objects.equals(this.id, issueLinkType.id) &&
        Objects.equals(this.$type, issueLinkType.$type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, localizedName, sourceToTarget, localizedSourceToTarget, targetToSource, localizedTargetToSource, directed, aggregation, readOnly, id, $type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssueLinkType {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    localizedName: ").append(toIndentedString(localizedName)).append("\n");
    sb.append("    sourceToTarget: ").append(toIndentedString(sourceToTarget)).append("\n");
    sb.append("    localizedSourceToTarget: ").append(toIndentedString(localizedSourceToTarget)).append("\n");
    sb.append("    targetToSource: ").append(toIndentedString(targetToSource)).append("\n");
    sb.append("    localizedTargetToSource: ").append(toIndentedString(localizedTargetToSource)).append("\n");
    sb.append("    directed: ").append(toIndentedString(directed)).append("\n");
    sb.append("    aggregation: ").append(toIndentedString(aggregation)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    $type: ").append(toIndentedString($type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
