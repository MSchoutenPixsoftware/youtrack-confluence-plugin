/*
 * YouTrack REST API
 * YouTrack issue tracking and project management system
 *
 * OpenAPI spec version: 2099.99
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package jetbrains.youtrack.client.api;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Represents query suggestion.
 */
@Schema(description = "Represents query suggestion.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-08-04T14:25:38.465627+03:00[Europe/Moscow]")@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "$type", visible = true )
@JsonSubTypes({
})

public class Suggestion {
  @JsonProperty("completionStart")
  private Integer completionStart = null;

  @JsonProperty("completionEnd")
  private Integer completionEnd = null;

  @JsonProperty("matchingStart")
  private Integer matchingStart = null;

  @JsonProperty("matchingEnd")
  private Integer matchingEnd = null;

  @JsonProperty("caret")
  private Integer caret = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("option")
  private String option = null;

  @JsonProperty("prefix")
  private String prefix = null;

  @JsonProperty("suffix")
  private String suffix = null;

  @JsonProperty("group")
  private String group = null;

  @JsonProperty("icon")
  private String icon = null;

  @JsonProperty("auxiliaryIcon")
  private String auxiliaryIcon = null;

  @JsonProperty("className")
  private String className = null;

  @JsonProperty("id")
  private String id = null;

  @JsonTypeId
  private String $type = null;

   /**
   * Get completionStart
   * @return completionStart
  **/
  @Schema(description = "")
  public Integer getCompletionStart() {
    return completionStart;
  }

   /**
   * Get completionEnd
   * @return completionEnd
  **/
  @Schema(description = "")
  public Integer getCompletionEnd() {
    return completionEnd;
  }

   /**
   * Get matchingStart
   * @return matchingStart
  **/
  @Schema(description = "")
  public Integer getMatchingStart() {
    return matchingStart;
  }

   /**
   * Get matchingEnd
   * @return matchingEnd
  **/
  @Schema(description = "")
  public Integer getMatchingEnd() {
    return matchingEnd;
  }

   /**
   * Get caret
   * @return caret
  **/
  @Schema(description = "")
  public Integer getCaret() {
    return caret;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

   /**
   * Get option
   * @return option
  **/
  @Schema(description = "")
  public String getOption() {
    return option;
  }

   /**
   * Get prefix
   * @return prefix
  **/
  @Schema(description = "")
  public String getPrefix() {
    return prefix;
  }

   /**
   * Get suffix
   * @return suffix
  **/
  @Schema(description = "")
  public String getSuffix() {
    return suffix;
  }

   /**
   * Get group
   * @return group
  **/
  @Schema(description = "")
  public String getGroup() {
    return group;
  }

   /**
   * Get icon
   * @return icon
  **/
  @Schema(description = "")
  public String getIcon() {
    return icon;
  }

   /**
   * Get auxiliaryIcon
   * @return auxiliaryIcon
  **/
  @Schema(description = "")
  public String getAuxiliaryIcon() {
    return auxiliaryIcon;
  }

   /**
   * Get className
   * @return className
  **/
  @Schema(description = "")
  public String getClassName() {
    return className;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public String getId() {
    return id;
  }

   /**
   * Get $type
   * @return $type
  **/
  @Schema(description = "")
  public String get$Type() {
    return $type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Suggestion suggestion = (Suggestion) o;
    return Objects.equals(this.completionStart, suggestion.completionStart) &&
        Objects.equals(this.completionEnd, suggestion.completionEnd) &&
        Objects.equals(this.matchingStart, suggestion.matchingStart) &&
        Objects.equals(this.matchingEnd, suggestion.matchingEnd) &&
        Objects.equals(this.caret, suggestion.caret) &&
        Objects.equals(this.description, suggestion.description) &&
        Objects.equals(this.option, suggestion.option) &&
        Objects.equals(this.prefix, suggestion.prefix) &&
        Objects.equals(this.suffix, suggestion.suffix) &&
        Objects.equals(this.group, suggestion.group) &&
        Objects.equals(this.icon, suggestion.icon) &&
        Objects.equals(this.auxiliaryIcon, suggestion.auxiliaryIcon) &&
        Objects.equals(this.className, suggestion.className) &&
        Objects.equals(this.id, suggestion.id) &&
        Objects.equals(this.$type, suggestion.$type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(completionStart, completionEnd, matchingStart, matchingEnd, caret, description, option, prefix, suffix, group, icon, auxiliaryIcon, className, id, $type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Suggestion {\n");
    
    sb.append("    completionStart: ").append(toIndentedString(completionStart)).append("\n");
    sb.append("    completionEnd: ").append(toIndentedString(completionEnd)).append("\n");
    sb.append("    matchingStart: ").append(toIndentedString(matchingStart)).append("\n");
    sb.append("    matchingEnd: ").append(toIndentedString(matchingEnd)).append("\n");
    sb.append("    caret: ").append(toIndentedString(caret)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    option: ").append(toIndentedString(option)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    suffix: ").append(toIndentedString(suffix)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    auxiliaryIcon: ").append(toIndentedString(auxiliaryIcon)).append("\n");
    sb.append("    className: ").append(toIndentedString(className)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    $type: ").append(toIndentedString($type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
